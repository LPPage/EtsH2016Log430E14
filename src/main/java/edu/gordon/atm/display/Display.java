/* * ATM Example system - file SimDisplay.java * * copyright (c) 2001 - Russell C. Bjork * */ package edu.gordon.atm.display;import java.awt.Color;import java.awt.Font;import java.awt.GridLayout;import java.awt.Insets;import java.awt.Label;import java.awt.Panel;import java.util.StringTokenizer;import edu.gordon.atm.common.Cancelled;import edu.gordon.atm.common.Modes;import edu.gordon.atm.physical.ICustomerConsole;import edu.gordon.banking.Money;/** Simulate the display portion of the customer console */public class Display extends Panel implements ICustomerConsole{	    /** Constructor     */    public Display(int nbLines, int nbColumns)    {    	this.nbLines = nbLines;    	this.nbColumns = nbColumns;    	    	createBlankDisplayLine();    	        setLayout(new GridLayout(nbLines, 1));        setBackground(new Color(0, 96, 0));  // Dark green        setForeground(Color.white);                Font lineFont = new Font("Monospaced", Font.PLAIN, 14);        displayLine = new Label[nbLines];        for (int i = 0; i < nbLines; i ++)        {        	            displayLine[i] = new Label(blankDisplayLine);            displayLine[i].setFont(lineFont);            add(displayLine[i]);        }        currentDisplayLine = 0;            }    private void createBlankDisplayLine()    {    	char[] line = new char[nbColumns];    	for (int i = 0; i < line.length; i++)    	{    		line[i] = ' ';    	}    	blankDisplayLine = new String(line);    }    	/** Clear the display     */    public void clearDisplay()    {         for (int i = 0; i < displayLine.length; i ++)            displayLine[i].setText("");        currentDisplayLine = 0;    }          /** Set echoed input on the display     *     *  @param echo the line to be echoed - always the entire line     */    public void setEcho(String echo)    {        displayLine[currentDisplayLine].setText(        		blankDisplayLine.substring(0,         				blankDisplayLine.length() / 2 - echo.length()) + echo);    }        /** Override the getInsets() method to provide additional spacing all     *  around     */    public Insets getInsets()    {        Insets insets = super.getInsets();        insets.top += 5;        insets.bottom += 5;        insets.left += 10;        insets.right += 10;        return insets;    }    /** Display a message to the customer    *    *  @param message the message to display    */   public void display(String text)   {       StringTokenizer tokenizer = new StringTokenizer(text, "\n", false);       while (tokenizer.hasMoreTokens())       {            try           {                displayLine[currentDisplayLine ++].setText(tokenizer.nextToken());            }           catch (Exception e)           { }       }   }      /** Read a PIN entered by the customer (echoed as asterisks)    *    *  @param prompt the message to display prompting the customer to enter PIN    *  @return the PIN that was entered    *  @exception Cancelled if customer presses the CANCEL key before pressing ENTER    */   public int readPIN(String prompt) throws Cancelled   {       clearDisplay();       display(prompt);       display("");              String input = readInput(Modes.PIN_MODE, 0);              clearDisplay();              if (input == null)           throw new Cancelled();       else           return Integer.parseInt(input);   }      /** Display a menu of options and return choice made by customer    *    *  @param prompt message to display before the list of options    *  @param menu the options    *  @return the number of the option chosen (0 .. # of options - 1)    *  Note: the options are numbered 1 .. # of options when displayed for the    *  customer - but the menu array indices and the final result returned are in    *  the range 0 .. # of options - 1    *    *  @exception Cancelled if customer presses the CANCEL key before choosing option    */   public synchronized int readMenuChoice(String prompt, String[] menu) throws Cancelled   {       clearDisplay();       display(prompt);       for (int i = 0; i < menu.length; i ++){           display((i+1) + ") " + menu[i]);                  //TODO comment       System.out.println("MENU: "+menu[i].toString());       }              String input = readInput(Modes.MENU_MODE, menu.length);              //TODO comment       System.out.println("INPUT: "+input);              clearDisplay();       System.out.println("DONE");       if (input == null)           throw new Cancelled();       else           return Integer.parseInt(input) - 1;   }      /** Read a money amount entered by the customer    *    *  @param prompt the message to display prompting the customer to enter amount    *  @return the amount entered by the customer    *  @exception Cancelled if customer presses the CANCEL key before pressing ENTER    */   public synchronized Money readAmount(String prompt) throws Cancelled   {       clearDisplay();       display(prompt);       display("");              String input = readInput(Modes.AMOUNT_MODE, 0);              clearDisplay();              if (input == null)           throw new Cancelled();       else       {           int dollars = Integer.parseInt(input) / 100;           int cents = Integer.parseInt(input) % 100;           return new Money(dollars, cents);       }   }      public void setReadInputCallback(ReadInputCallback c) {       this.readInputCallback = c;   }      private String readInput(int mode, int maxValue) {	   return readInputCallback.readInputCallbackReceived(mode, maxValue);   }       /** Individual lines comprising the display     */    private Label [] displayLine;        /** Number of the current line to write to     */    private int currentDisplayLine;        /** Callback invoked when input required     */    private ReadInputCallback readInputCallback;        /** Number of lines that can be displayed     */    private int nbLines;        /** Number of columns that can be displayed     */    private int nbColumns;        /** Number of columns that can be displayed     */    private String blankDisplayLine;        public interface ReadInputCallback {    	public String readInputCallbackReceived(int mode, int maxValue);	}}                                       