/* * ATM Example system - file Session.java * * copyright (c) 2001 - Russell C. Bjork * */ package edu.gordon.atm;import edu.gordon.atm.common.Cancelled;import edu.gordon.atm.physical.ICardReader;import edu.gordon.atm.physical.ICustomerConsole;import edu.gordon.atm.transaction.Deposit;import edu.gordon.atm.transaction.IATM;import edu.gordon.atm.transaction.ISession;import edu.gordon.atm.transaction.Inquiry;import edu.gordon.atm.transaction.Transaction;import edu.gordon.atm.transaction.Transfer;import edu.gordon.atm.transaction.Withdrawal;import edu.gordon.banking.Card;/** Representation for one ATM session serving a single customer. */public class Session implements ISession{    /** Constructor     *     *  @param edu.gordon.atm the ATM on which the session is performed     */    public Session(ICardReader cardReader, ICustomerConsole customerConsole, TransactionFactory transactionFactory)    {        this.cardReader = cardReader;        this.customerConsole = customerConsole;        this.transactionFactory = transactionFactory;                state = READING_CARD_STATE;    }    /** Perform the Session Use Case     */    public void performSession()    {        Card card = null;        Transaction currentTransaction = null;                while (state != FINAL_STATE)        {            switch(state)            {                case READING_CARD_STATE:                                                    card = cardReader.readCard();                                        if (card != null)                        state = READING_PIN_STATE;                    else                    {                        customerConsole.display("Unable to read card");                        state = EJECTING_CARD_STATE;                    }                    break;                                    case READING_PIN_STATE:                                    try                    {                        pin = customerConsole.readPIN(                            "Please enter your PIN\n" +                            "Then press ENTER");                        state = CHOOSING_TRANSACTION_STATE;                    }                    catch(Cancelled e)                    {                        state = EJECTING_CARD_STATE;                    }                    break;                                case CHOOSING_TRANSACTION_STATE:                                    try                    {                        currentTransaction = transactionFactory.makeTransaction(this, card, pin);                        state = PERFORMING_TRANSACTION_STATE;                    }                    catch(Cancelled e)                    {                        state = EJECTING_CARD_STATE;                    }                    break;                                    case PERFORMING_TRANSACTION_STATE:                                    try                    {                        boolean doAgain =                             currentTransaction.performTransaction();                        if (doAgain)                            state = CHOOSING_TRANSACTION_STATE;                        else                            state = EJECTING_CARD_STATE;                    }                    catch(Transaction.CardRetained e)                    {                        state = FINAL_STATE;                    }                    break;                                    case EJECTING_CARD_STATE:                                	cardReader.ejectCard();                    state = FINAL_STATE;                    break;            }        }    }        /** Change the pin recorded for the customer (if invalid pin extension     *  was performed by a transaction     *     *  @param pin the newly entered pin     */    public void setPIN(int pin)    {        this.pin = pin;    }        // Instance variables    /** The ATM on which the session is performed     */    private ICardReader cardReader;        private ICustomerConsole customerConsole;        /** The PIN entered (or re-entered) by the customer     */    private int pin;    /** The current state of the session     */    private int state;        private TransactionFactory transactionFactory;        // Possible values for state        /** Reading the customer's card     */    private static final int READING_CARD_STATE = 1;        /** Asking the customer to enter a PIN     */    private static final int READING_PIN_STATE = 2;        /** Asking the customer to choose a transaction type     */    private static final int CHOOSING_TRANSACTION_STATE = 3;        /** Peforming a transaction     */    private static final int PERFORMING_TRANSACTION_STATE = 4;        /** Ejecting the customer's card     */    private static final int EJECTING_CARD_STATE = 5;        /** Session finished     */    private static final int FINAL_STATE = 6;    }