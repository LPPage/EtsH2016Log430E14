/* * ATM Example system - file SimCardReader.java * * copyright (c) 2001 - Russell C. Bjork * */ package edu.gordon.simulation;import java.awt.Button;import java.awt.Rectangle;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import com.google.common.eventbus.EventBus;import com.google.common.eventbus.Subscribe;import edu.gordon.atm.events.CardEjectedEvent;import edu.gordon.atm.events.CardInsertedEvent;import edu.gordon.atm.events.CardReadEvent;import edu.gordon.atm.events.CardRetainedEvent;import edu.gordon.atm.events.SwitchChangedEvent;import edu.gordon.atm.physical.ICardReader;import edu.gordon.banking.Card;/** Simulate the card reader */class SimCardReader extends Button implements ICardReader {    /** Constructor     *     *  @param edu.gordon.simulation the Simulation object     */    SimCardReader(final EventBus eventBus)    {        super("Click to insert card");        this.eventBus = eventBus;        this.eventBus.register(this);                addActionListener(new ActionListener() {            public void actionPerformed(ActionEvent e)            {            	eventBus.post(new CardInsertedEvent());            }        });                // Not available until machine is turned on                setVisible(false);    }        /** Animate card going into the machine     */    void animateInsertion()    {        originalBounds = getBounds();        Rectangle currentBounds =           new Rectangle(originalBounds.x, originalBounds.y,                         originalBounds.width, originalBounds.height);                                 while (currentBounds.width > 0 && currentBounds.height > 0)        {             setBounds(currentBounds.x, currentBounds.y,                      currentBounds.width, currentBounds.height);            repaint();            try             {                 Thread.sleep(100);            }             catch (InterruptedException e)             { }                        currentBounds.height -= 1;            currentBounds.width =               (originalBounds.width * currentBounds.height) / originalBounds.height;            currentBounds.x =              originalBounds.x + (originalBounds.width - currentBounds.width) / 2;            currentBounds.y =              originalBounds.y + (originalBounds.height - currentBounds.height) / 2;        }                  setVisible(false);      }        /** Animate ejecting the card that is currently inside the reader.       */    void animateEjection()    {        setLabel("Ejecting card");        setVisible(true);                Rectangle currentBounds =            new Rectangle(originalBounds.x + originalBounds.width / 2,                         originalBounds.y + originalBounds.height / 2,                         originalBounds.width / originalBounds.height, 1);                while (currentBounds.height <= originalBounds.height &&               currentBounds.width <= originalBounds.width)        {             setBounds(currentBounds.x, currentBounds.y,                      currentBounds.width, currentBounds.height);            repaint();            try             {                 Thread.sleep(100);            }             catch (InterruptedException e)             { }            currentBounds.height += 1;            currentBounds.width =               (originalBounds.width * currentBounds.height) / originalBounds.height;            currentBounds.x =              originalBounds.x + (originalBounds.width - currentBounds.width) / 2;            currentBounds.y =              originalBounds.y + (originalBounds.height - currentBounds.height) / 2;        }                  setLabel("Click to insert card");    }    /** Animate retaining the card that is currently inside the reader for action by the     *  bank.      */    void animateRetention()    {        setLabel("Click to insert card");        setVisible(true);    }        /** Read a card that has been partially inserted into the reader    *    *  @return Card object representing information on the card if read    *          successfully, null if not read successfully    */   public Card readCard()   {	   animateInsertion();	   CardReadEvent event = new CardReadEvent();	   eventBus.post(event);       return event.getCard();   }      /** Eject the card that is currently inside the reader.      */   public void ejectCard()   {       animateEjection();	   eventBus.post(new CardEjectedEvent());   }      /** Retain the card that is currently inside the reader for action by the    *  bank.    */   public void retainCard()   {       animateRetention();	   eventBus.post(new CardRetainedEvent());   }      @Subscribe   public void setVisible(SwitchChangedEvent event){	   setVisible(event.isOn());   }       /** To animate card insertion/ejection, we change the bounds of this button.     *  These are the original bounds we ultimately restore to     */     private Rectangle originalBounds;        private final EventBus eventBus;}                                       